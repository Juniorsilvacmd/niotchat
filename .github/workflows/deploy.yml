name: Deploy NioChat to Production

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: juniorssilvaa/niochat

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: niochat_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/frontend/package-lock.json
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: |
          cd frontend/frontend
          npm install --legacy-peer-deps
      - run: |
          cd backend
          python manage.py migrate
          python manage.py test
        env:
          SECRET_KEY: test-secret-key
          DEBUG: True
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/niochat_test
          REDIS_URL: redis://localhost:6379
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
      - run: |
          cd frontend/frontend
          npm run build
      - run: |
          pip install flake8
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

  validate-portainer:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - run: |
          curl -s -o /dev/null -w "%{http_code}" \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            https://portainer.niochat.com.br/api/endpoints/1/docker/containers/json

  deploy:
    needs: [test, build-and-push, validate-portainer]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Deploy to Portainer
        env:
          PORTAINER_URL: https://portainer.niochat.com.br
          PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
          BACKEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          FRONTEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        run: |
          echo "Deploying to Portainer..."

          # Atualizar stack
          STACK_ID=$(curl -s -H "X-API-Key: $PORTAINER_API_KEY" \
            "$PORTAINER_URL/api/stacks" | jq -r '.[] | select(.Name == "niochat") | .Id')

          if [ -z "$STACK_ID" ] || [ "$STACK_ID" = "null" ]; then
            echo "Stack 'niochat' not found. Please create it first in Portainer."
            exit 1
          fi

          CURRENT_STACK=$(curl -s -H "X-API-Key: $PORTAINER_API_KEY" \
            "$PORTAINER_URL/api/stacks/$STACK_ID/file")

          UPDATED_STACK=$(echo "$CURRENT_STACK" | jq --arg backend "$BACKEND_IMAGE" --arg frontend "$FRONTEND_IMAGE" '
            .StackFileContent = (.StackFileContent |
              gsub("ghcr\\.io/juniorssilvaa/niochat-backend:[^\\s]+"; $backend) |
              gsub("ghcr\\.io/juniorssilvaa/niochat-frontend:[^\\s]+"; $frontend)
            )
          ')

          curl -s -X PUT \
            -H "X-API-Key: $PORTAINER_API_KEY" \
            -H "Content-Type: application/json" \
            --data "$UPDATED_STACK" \
            "$PORTAINER_URL/api/stacks/$STACK_ID?endpointId=1"

          echo "Stack updated successfully!"

          # ForÃ§ar pull das novas imagens
          echo "Forcing pull of new images..."
          curl -s -X POST \
            -H "X-API-Key: $PORTAINER_API_KEY" \
            "$PORTAINER_URL/api/endpoints/1/docker/images/create?fromImage=$BACKEND_IMAGE"
          
          curl -s -X POST \
            -H "X-API-Key: $PORTAINER_API_KEY" \
            "$PORTAINER_URL/api/endpoints/1/docker/images/create?fromImage=$FRONTEND_IMAGE"
          
          echo "Images pulled successfully!"

      - name: Restart containers
        env:
          PORTAINER_URL: https://portainer.niochat.com.br
          PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
        run: |
          echo "Restarting containers to use new images..."
          
          # Listar containers da stack
          CONTAINERS=$(curl -s -H "X-API-Key: $PORTAINER_API_KEY" \
            "$PORTAINER_URL/api/endpoints/1/docker/containers/json?all=true" | \
            jq -r '.[] | select(.Labels."com.docker.compose.project" == "niochat") | .Id')
          
          # Reiniciar cada container
          for container in $CONTAINERS; do
            echo "Restarting container: $container"
            curl -s -X POST \
              -H "X-API-Key: $PORTAINER_API_KEY" \
              "$PORTAINER_URL/api/endpoints/1/docker/containers/$container/restart"
          done
          
          echo "Containers restarted successfully!"

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          echo "Checking application health..."
          
          # Verificar backend
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://app.niochat.com.br/api/health/")
          if [ "$BACKEND_STATUS" = "200" ]; then
            echo "Backend is healthy (status: $BACKEND_STATUS)"
          else
            echo "Backend health check failed (status: $BACKEND_STATUS)"
            exit 1
          fi

          # Aguardar mais tempo para o frontend inicializar
          echo "Waiting for frontend to initialize..."
          sleep 30

          # Verificar frontend com retry - testando diferentes caminhos
          FRONTEND_STATUS=""
          FRONTEND_PATHS=("/" "/app/" "/static/")
          
          for path in "${FRONTEND_PATHS[@]}"; do
            echo "Testing frontend path: $path"
            for i in {1..3}; do
              FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://app.niochat.com.br$path")
              echo "Frontend check attempt $i for $path: status $FRONTEND_STATUS"
              
              if [ "$FRONTEND_STATUS" = "200" ]; then
                echo "Frontend is healthy at $path (status: $FRONTEND_STATUS)"
                break 2
              fi
              
              if [ $i -lt 3 ]; then
                echo "Waiting 5 seconds before retry..."
                sleep 5
              fi
            done
          done

          if [ "$FRONTEND_STATUS" != "200" ]; then
            echo "Frontend health check failed after 5 attempts (final status: $FRONTEND_STATUS)"
            echo "Checking container status..."
            curl -s -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
              "https://portainer.niochat.com.br/api/endpoints/1/docker/containers/json?all=true" | \
              jq -r '.[] | select(.Labels."com.docker.compose.project" == "niochat") | "\(.Names[0]): \(.Status)"'
            exit 1
          fi

      - name: Cleanup old images
        continue-on-error: true
        run: |
          echo "Pruning unused Docker images..."
          curl -s -X POST \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            "$PORTAINER_URL/api/endpoints/1/docker/images/prune?all=true"
          echo "Cleanup completed successfully!"

      - name: Notify deployment
        run: |
          echo "ðŸš€ NioChat deployed successfully!"
          echo "Frontend: https://app.niochat.com.br"
          echo "API: https://app.niochat.com.br/api/"

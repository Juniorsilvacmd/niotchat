#!/bin/bash

# Script de Deploy Autom√°tico para VPS
# Este script ser√° executado pelo GitHub Actions

echo "üöÄ Iniciando deploy autom√°tico..."

# Configura√ß√µes
PROJECT_DIR="/var/www/app_niochat"
VENV_DIR="/var/www/app_niochat/venv"
BACKEND_DIR="/var/www/app_niochat/backend"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Verificar se o diret√≥rio existe
if [ ! -d "$PROJECT_DIR" ]; then
    error "Diret√≥rio do projeto n√£o encontrado: $PROJECT_DIR"
    exit 1
fi

cd "$PROJECT_DIR"

# Fazer backup do banco de dados
log "Fazendo backup do banco de dados..."
if command -v pg_dump &> /dev/null; then
    pg_dump -U niochat_user -h localhost niochat > backup_$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || warning "‚ö†Ô∏è N√£o foi poss√≠vel criar backup"
else
    warning "‚ö†Ô∏è pg_dump n√£o encontrado, pulando backup"
fi

# Atualizar c√≥digo do GitHub
log "Atualizando c√≥digo do GitHub..."
git fetch origin
git reset --hard origin/main

# Verificar se a atualiza√ß√£o foi bem-sucedida
if [ $? -ne 0 ]; then
    error "Falha ao atualizar c√≥digo do GitHub"
    exit 1
fi

log "‚úÖ C√≥digo atualizado com sucesso"

# Verificar se o ambiente virtual existe
if [ ! -d "$VENV_DIR" ]; then
    log "Criando ambiente virtual..."
    python3 -m venv venv
    source venv/bin/activate
    pip install --upgrade pip
    log "‚úÖ Ambiente virtual criado"
else
    log "Ativando ambiente virtual..."
    source venv/bin/activate
fi

# Instalar/atualizar depend√™ncias do backend
log "Instalando depend√™ncias do backend..."
cd "$BACKEND_DIR"
pip install -r requirements.txt

# Executar migra√ß√µes
log "Executando migra√ß√µes..."
python manage.py migrate --noinput

# Coletar arquivos est√°ticos
log "Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput

cd "$PROJECT_DIR"

# Instalar depend√™ncias do frontend
log "Instalando depend√™ncias do frontend..."
cd frontend/frontend
npm install --production

# Build do frontend
log "Fazendo build do frontend..."
npm run build

cd "$PROJECT_DIR"

# Verificar e configurar Redis para IA
log "Verificando configura√ß√£o do Redis para IA..."
if systemctl is-active --quiet redis-server; then
    log "‚úÖ Redis est√° rodando"
    
    # Testar conex√£o com Redis
    if redis-cli ping | grep -q "PONG"; then
        log "‚úÖ Conex√£o com Redis funcionando"
        
        # Configurar bancos de dados espec√≠ficos para IA
        redis-cli -n 1 ping > /dev/null 2>&1 || redis-cli -n 1 ping > /dev/null
        redis-cli -n 2 ping > /dev/null 2>&1 || redis-cli -n 2 ping > /dev/null
        redis-cli -n 3 ping > /dev/null 2>&1 || redis-cli -n 3 ping > /dev/null
        
        log "‚úÖ Bancos de dados Redis configurados para IA"
    else
        error "‚ùå Falha na conex√£o com Redis"
        exit 1
    fi
else
    error "‚ùå Redis n√£o est√° rodando"
    log "Iniciando Redis..."
    systemctl start redis-server
    sleep 3
    
    if systemctl is-active --quiet redis-server; then
        log "‚úÖ Redis iniciado com sucesso"
    else
        error "‚ùå Falha ao iniciar Redis"
        exit 1
    fi
fi

# Reiniciar servi√ßos
log "Reiniciando servi√ßos..."

# Reiniciar backend (Daphne)
if systemctl is-active --quiet niochat; then
    systemctl restart niochat
    log "‚úÖ Backend reiniciado"
else
    warning "Servi√ßo backend n√£o encontrado, iniciando..."
    systemctl start niochat
fi

# Reiniciar Celery worker (se existir)
if systemctl is-active --quiet niochat-celery; then
    systemctl restart niochat-celery
    log "‚úÖ Celery worker reiniciado"
else
    warning "Servi√ßo Celery n√£o encontrado"
fi

# Reiniciar Celery beat (se existir)
if systemctl is-active --quiet niochat-celery-beat; then
    systemctl restart niochat-celery-beat
    log "‚úÖ Celery beat reiniciado"
else
    warning "Servi√ßo Celery beat n√£o encontrado"
fi

# Reiniciar Nginx
systemctl reload nginx
log "‚úÖ Nginx recarregado"

# Aguardar servi√ßos iniciarem
log "Aguardando servi√ßos iniciarem..."
sleep 10

# Verificar status dos servi√ßos
log "Verificando status dos servi√ßos..."
services=("niochat" "nginx" "redis-server" "postgresql")

for service in "${services[@]}"; do
    if systemctl is-active --quiet "$service"; then
        log "‚úÖ $service est√° rodando"
    else
        error "‚ùå $service n√£o est√° rodando"
        log "Logs do $service:"
        journalctl -u "$service" --no-pager -n 10
    fi
done

# Verificar conectividade
log "Verificando conectividade..."
if curl -s http://localhost:80 > /dev/null; then
    log "‚úÖ Nginx respondendo na porta 80"
else
    error "‚ùå Nginx n√£o est√° respondendo na porta 80"
fi

if curl -s http://localhost:8000 > /dev/null; then
    log "‚úÖ Backend respondendo na porta 8000"
else
    error "‚ùå Backend n√£o est√° respondendo na porta 8000"
fi

# Verificar Redis para IA
log "Verificando Redis para IA..."
if redis-cli -n 1 ping | grep -q "PONG" && \
   redis-cli -n 2 ping | grep -q "PONG" && \
   redis-cli -n 3 ping | grep -q "PONG"; then
    log "‚úÖ Todos os bancos Redis para IA est√£o funcionando"
else
    error "‚ùå Problema com bancos Redis para IA"
fi

# Verificar dom√≠nios
log "Verificando dom√≠nios..."
domains=("app.niochat.com.br" "api.niochat.com.br" "admin.niochat.com.br")

for domain in "${domains[@]}"; do
    if nslookup $domain | grep -q "194.238.25.164"; then
        log "‚úÖ Dom√≠nio $domain configurado"
    else
        warning "‚ö†Ô∏è Dom√≠nio $domain n√£o est√° apontando para 194.238.25.164"
    fi
done

# Configurar SSL se necess√°rio
log "Verificando certificados SSL..."
for domain in "${domains[@]}"; do
    if [ ! -d "/etc/letsencrypt/live/$domain" ]; then
        warning "‚ö†Ô∏è Certificado SSL n√£o encontrado para $domain"
        info "Execute: certbot --nginx -d $domain"
    else
        log "‚úÖ Certificado SSL encontrado para $domain"
    fi
done

# Verificar logs de erro
log "Verificando logs de erro..."
if journalctl -u niochat --since "5 minutes ago" | grep -i error; then
    warning "‚ö†Ô∏è Encontrados erros nos logs do backend"
else
    log "‚úÖ Nenhum erro encontrado nos logs do backend"
fi

# Verificar configura√ß√µes de IA
log "Verificando configura√ß√µes de IA..."
if [ -f ".env" ]; then
    if grep -q "OPENAI_API_KEY" .env && ! grep -q "your-openai-api-key-here" .env; then
        log "‚úÖ Chave da OpenAI configurada"
    else
        warning "‚ö†Ô∏è Chave da OpenAI n√£o configurada ou usando valor padr√£o"
    fi
    
    if grep -q "REDIS_URL" .env; then
        log "‚úÖ Redis configurado para IA"
    else
        warning "‚ö†Ô∏è Redis n√£o configurado para IA"
    fi
else
    warning "‚ö†Ô∏è Arquivo .env n√£o encontrado"
fi

log "üéâ Deploy conclu√≠do!"
log ""
log "üåê URLs:"
log "   - Frontend: https://app.niochat.com.br"
log "   - API: https://api.niochat.com.br"
log "   - Admin: https://admin.niochat.com.br"
log ""
log "üß† IA e Mem√≥ria:"
log "   - Redis: ‚úÖ Funcionando (porta 6379)"
log "   - Banco IA: ‚úÖ Banco 1 configurado"
log "   - Banco Conversas: ‚úÖ Banco 2 configurado"
log "   - Banco Cache: ‚úÖ Banco 3 configurado"
log ""
log "üîß Comandos √∫teis:"
log "   - Status: systemctl status niochat"
log "   - Logs: journalctl -u niochat -f"
log "   - Redis: redis-cli ping"
log "   - Redis IA: redis-cli -n 1 ping"
log "   - Reiniciar: systemctl restart niochat"
log "   - Parar: systemctl stop niochat"
log "   - Iniciar: systemctl start niochat"
log ""
log "üìä Monitoramento:"
log "   - Logs do sistema: journalctl -u niochat -f"
log "   - Status dos servi√ßos: systemctl list-units --type=service --state=running | grep niochat"
log "   - Redis: systemctl status redis-server" 
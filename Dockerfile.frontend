# Frontend Dockerfile COM NGINX (corrigido)
FROM node:18-alpine AS build

WORKDIR /app
COPY frontend/frontend/package*.json ./
RUN npm install -g pnpm
RUN pnpm install

COPY frontend/frontend/src ./src
COPY frontend/frontend/public ./public
COPY frontend/frontend/index.html ./
COPY frontend/frontend/vite.config.js ./
COPY frontend/frontend/jsconfig.json ./
COPY frontend/frontend/components.json ./
COPY frontend/frontend/eslint.config.js ./

RUN pnpm run build

# Production stage com Nginx
FROM nginx:alpine

# Copiar arquivos buildados
COPY --from=build /app/dist /usr/share/nginx/html

# ✅ CONFIGURAÇÃO CORRIGIDA (sem loop)
RUN echo 'events {\
    worker_connections 1024;\
}\
\
http {\
    include /etc/nginx/mime.types;\
    default_type application/octet-stream;\
    \
    server {\
        listen 80;\
        server_name localhost;\
        root /usr/share/nginx/html;\
        index index.html;\
        \
        # ✅ CONFIGURAÇÃO CORRETA PARA REACT ROUTER\
        location / {\
            # Primeiro tenta servir o arquivo exato\
            try_files $uri $uri/ @rewrites;\
        }\
        \
        # ✅ Regra para redirecionar tudo para index.html\
        location @rewrites {\
            rewrite ^.*$ /index.html last;\
        }\
        \
        # ✅ Arquivos estáticos\
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\
            expires 1y;\
            add_header Cache-Control "public, immutable";\
        }\
    }\
}' > /etc/nginx/nginx.conf

# ✅ Criar diretórios com permissões
RUN mkdir -p /var/cache/nginx/client_temp && \
    chmod -R 755 /var/cache/nginx && \
    chmod -R 755 /var/log/nginx && \
    chmod -R 755 /etc/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# ✅ Executar como root para evitar problemas de permissão
# USER nginx

CMD ["nginx", "-g", "daemon off;"]

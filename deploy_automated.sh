#!/bin/bash

# Script de Deploy Automatizado para VPS
# Este script ser√° executado automaticamente quando houver push no GitHub

echo "üöÄ Iniciando deploy automatizado..."

# Configura√ß√µes
PROJECT_DIR="/var/www/niochat"
GITHUB_REPO="https://github.com/Juniorsilvacmd/niochat.git"
BRANCH="main"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

# Verificar se o diret√≥rio existe
if [ ! -d "$PROJECT_DIR" ]; then
    log "Criando diret√≥rio do projeto..."
    mkdir -p $PROJECT_DIR
    cd $PROJECT_DIR
    git clone $GITHUB_REPO .
else
    log "Atualizando c√≥digo do GitHub..."
    cd $PROJECT_DIR
    git fetch origin
    git reset --hard origin/$BRANCH
fi

# Verificar se o clone/update foi bem-sucedido
if [ $? -ne 0 ]; then
    error "Falha ao atualizar c√≥digo do GitHub"
    exit 1
fi

log "‚úÖ C√≥digo atualizado com sucesso"

# Ativar ambiente virtual se existir
if [ -d "venv" ]; then
    log "Ativando ambiente virtual..."
    source venv/bin/activate
else
    log "Criando ambiente virtual..."
    python3 -m venv venv
    source venv/bin/activate
    pip install --upgrade pip
fi

# Instalar depend√™ncias do backend
log "Instalando depend√™ncias do backend..."
cd backend
pip install -r requirements.txt

# Executar migra√ß√µes
log "Executando migra√ß√µes..."
python manage.py migrate --noinput

# Coletar arquivos est√°ticos
log "Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput

cd ..

# Instalar depend√™ncias do frontend
log "Instalando depend√™ncias do frontend..."
cd frontend/frontend
npm install --production

# Build do frontend
log "Fazendo build do frontend..."
npm run build

cd ../..

# Reiniciar servi√ßos
log "Reiniciando servi√ßos..."

# Reiniciar backend (Daphne)
if systemctl is-active --quiet niochat-backend; then
    systemctl restart niochat-backend
    log "‚úÖ Backend reiniciado"
else
    warning "Servi√ßo backend n√£o encontrado, iniciando..."
    systemctl start niochat-backend
fi

# Reiniciar frontend (se estiver como servi√ßo)
if systemctl is-active --quiet niochat-frontend; then
    systemctl restart niochat-frontend
    log "‚úÖ Frontend reiniciado"
else
    warning "Servi√ßo frontend n√£o encontrado"
fi

# Reiniciar Nginx
systemctl reload nginx
log "‚úÖ Nginx recarregado"

# Verificar status dos servi√ßos
log "Verificando status dos servi√ßos..."
if systemctl is-active --quiet niochat-backend; then
    log "‚úÖ Backend est√° rodando"
else
    error "‚ùå Backend n√£o est√° rodando"
fi

if systemctl is-active --quiet nginx; then
    log "‚úÖ Nginx est√° rodando"
else
    error "‚ùå Nginx n√£o est√° rodando"
fi

log "üéâ Deploy automatizado conclu√≠do com sucesso!"
log "üåê URLs:"
log "   - Frontend: https://app.niochat.com.br"
log "   - API: https://api.niochat.com.br"
log "   - Admin: https://admin.niochat.com.br" 